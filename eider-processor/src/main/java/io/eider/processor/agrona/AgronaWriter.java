/*
 * Copyright 2019-2020 Shaun Laurens.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.eider.processor.agrona;

import static io.eider.processor.agrona.Constants.BUFFER;
import static io.eider.processor.agrona.Constants.JAVA_NIO_BYTE_ORDER_LITTLE_ENDIAN1;
import static io.eider.processor.agrona.Constants.OFFSET;

import java.io.IOException;
import java.io.Writer;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Modifier;
import javax.tools.JavaFileObject;

import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import org.agrona.DirectBuffer;

import io.eider.processor.EiderCodeWriter;
import io.eider.processor.PreprocessedEiderComposite;
import io.eider.processor.PreprocessedEiderObject;

public class AgronaWriter implements EiderCodeWriter
{
    private final AgronaCompositeGenerator compositeGenerator = new AgronaCompositeGenerator();
    private final AgronaSpecGenerator specGenerator = new AgronaSpecGenerator();

    @Override
    public void generate(final ProcessingEnvironment pe, final List<PreprocessedEiderObject> objects,
                         final List<PreprocessedEiderComposite> composites)
    {
        String packageName = null;

        final AgronaWriterGlobalState globalState = new AgronaWriterGlobalState();

        for (final PreprocessedEiderObject object : objects)
        {
            packageName = object.getPackageNameGen();
            AgronaWriterState state = new AgronaWriterState();
            specGenerator.generateSpecObject(pe, object, state, globalState);
            if (object.buildRepository())
            {
                specGenerator.generateSpecRepository(pe, object);
            }
        }

        if (packageName != null)
        {
            for (final PreprocessedEiderComposite composite : composites)
            {
                compositeGenerator.generateComposite(pe, composite, globalState);
                if (composite.buildRepository())
                {
                    compositeGenerator.generateCompositeRepository(pe, composite);
                }
            }
            generateEiderHelper(pe);
        }
    }

    private void generateEiderHelper(ProcessingEnvironment pe)
    {
        final String packageName = "io.eider.Helper";

        TypeSpec.Builder builder = TypeSpec.classBuilder("EiderHelper")
            .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
            .addMethods(buildHeaderHelperMethods());
        TypeSpec generated = builder.build();

        JavaFile javaFile = JavaFile.builder(packageName, generated)
            .addFileComment("EIDER HELPER GENERATED BY EIDER AT "
                + LocalDateTime.now(ZoneId.of("UTC")).toString()
                + "Z. ")
            .addFileComment("DO NOT MODIFY")
            .build();

        try
        { // write the file
            JavaFileObject source = pe.getFiler()
                .createSourceFile(packageName + ".EiderHelper");
            Writer writer = source.openWriter();
            javaFile.writeTo(writer);
            writer.flush();
            writer.close();
        } catch (IOException e)
        {
            //normal
        }
    }

    private Iterable<MethodSpec> buildHeaderHelperMethods()
    {
        List<MethodSpec> results = new ArrayList<>();

        results.add(
            MethodSpec.constructorBuilder()
                .addJavadoc("private constructor.")
                .addModifiers(Modifier.PRIVATE)
                .addStatement("//unused")
                .build()
        );

        results.add(
            MethodSpec.methodBuilder("getEiderId")
                .addJavadoc("Reads the Eider Id from the buffer at the offset provided.")
                .addModifiers(Modifier.PUBLIC)
                .addModifiers(Modifier.STATIC)
                .returns(short.class)
                .addParameter(DirectBuffer.class, BUFFER)
                .addParameter(int.class, OFFSET)
                .addStatement("return buffer.getShort(offset" + JAVA_NIO_BYTE_ORDER_LITTLE_ENDIAN1)
                .build()
        );

        results.add(
            MethodSpec.methodBuilder("getEiderGroupId")
                .addJavadoc("Reads the Eider Group Id from the buffer at the offset provided.")
                .addModifiers(Modifier.PUBLIC)
                .addModifiers(Modifier.STATIC)
                .returns(short.class)
                .addParameter(DirectBuffer.class, BUFFER)
                .addParameter(int.class, OFFSET)
                .addStatement("return buffer.getShort(offset + 2"
                    +
                    JAVA_NIO_BYTE_ORDER_LITTLE_ENDIAN1)
                .build()
        );

        return results;
    }

}
