/*
 * Copyright 2019-2022 Shaun Laurens.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'idea'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
    id 'maven-publish'
}

defaultTasks 'clean', 'check', 'build', 'test'

def eiderGroup = 'io.eider'
def eiderVersion = file('version.txt').text.trim()
def javaVersion = JavaVersion.VERSION_17

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'

    group eiderGroup
    version eiderVersion

    compileJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.compilerArgs.addAll(['--add-exports', 'java.base/java.lang.reflect=ALL-UNNAMED'])
        options.compilerArgs.addAll(['--add-exports', 'java.base/java.net=ALL-UNNAMED'])
        options.compilerArgs.addAll(['--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED'])
        options.compilerArgs.addAll(['--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED'])
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    compileTestJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.compilerArgs.addAll(['--add-exports', 'java.base/java.lang.reflect=ALL-UNNAMED'])
        options.compilerArgs.addAll(['--add-exports', 'java.base/java.net=ALL-UNNAMED'])
        options.compilerArgs.addAll(['--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED'])
        options.compilerArgs.addAll(['--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED'])
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation group: 'org.agrona', name: 'agrona', version: '1.16.0'
        implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2'
        checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: '10.3'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.2'
        implementation "org.hdrhistogram:HdrHistogram:2.1.12"
    }

    tasks.withType(Checkstyle) {
        checkstyle {
            configFile = "${rootDir}/config/checks.xml" as File
            configProperties = ["suppressionFile": "${rootDir}/config/suppressions.xml"]
            toolVersion = '10.3'
            ignoreFailures = false
            showViolations = true
        }
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
    }

    test {
        useJUnitPlatform()
        jvmArgs('--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED')
        jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED')

        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

project('eider-internals') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
}

project('eider-java-writer') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    dependencies {
        implementation 'com.squareup:javapoet:1.13.0'
        implementation project(path: ':eider-internals')
    }
}

project('eider-processor') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        implementation project(path: ':eider-internals')
        implementation project(path: ':eider-java-writer')
    }

    shadowJar {
        dependsOn(':eider-internals:jar')
        dependsOn(':eider-java-writer:jar')
        archiveClassifier.set('')
    }

    jar.finalizedBy shadowJar

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/eleventy7/eider")
                credentials {
                    username = System.getenv("GPR_USER")
                    password = System.getenv("GPR_API_KEY")
                }
            }
        }

        publications {
            ghp(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version
                from components.java
            }
        }

    }
}

project('eider-test') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    def generatedDir = file("${buildDir}/generated")


    sourceSets {
        generated.java.srcDir generatedDir
        jmh {
            java.srcDirs += 'src/jmh/java'
            java.srcDirs += generatedDir
            compileClasspath += sourceSets.main.runtimeClasspath
            runtimeClasspath += sourceSets.test.runtimeClasspath
        }
    }

    task cleanUpJmh(type: Delete) {
        delete 'build/generated/sources/annotationProcessor/java/jmh'
        followSymlinks = false
    }

    compileJava {
        dependsOn(':eider-processor:shadowJar')
        String relativePath = "build/generated/src/main/java"
        sourceSets.main.java { srcDir relativePath }
        File generatedSourceDir = project.file("build/generated/src/main/java")
        project.mkdir(generatedSourceDir)
        options.annotationProcessorGeneratedSourcesDirectory = generatedSourceDir
        outputs.dir(generatedSourceDir)
        dependsOn(cleanUpJmh)
    }

    compileGeneratedJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.deprecation = true
        classpath += sourceSets.main.runtimeClasspath
    }

    dependencies {
        annotationProcessor project(':eider-processor')
        jmhImplementation project
        jmhImplementation "org.openjdk.jmh:jmh-core:1.35"
        jmhAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:1.35"
        implementation project(path: ':eider-processor')
        implementation "org.hdrhistogram:HdrHistogram:2.1.12"
        implementation "org.openjdk.jmh:jmh-core:1.35"
        testImplementation project(path: ':eider-processor')
        testImplementation sourceSets.generated.output
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.1'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.1'
    }

    compileGeneratedJava.dependsOn(compileJava)
    checkstyleMain.dependsOn(compileGeneratedJava)
    compileJmhJava.dependsOn(compileGeneratedJava)
    checkstyleGenerated.dependsOn(compileJmhJava)
    checkstyleGenerated.dependsOn(compileJmhJava)
    compileJmhJava.dependsOn(compileTestJava)

    task jmh(type: JavaExec, description: 'Executing JMH benchmarks') {
        classpath = sourceSets.jmh.runtimeClasspath
        mainClass = 'org.openjdk.jmh.Main'
    }
}
